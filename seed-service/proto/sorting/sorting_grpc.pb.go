// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: sorting.proto

package sorting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SortingServiceClient is the client API for SortingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SortingServiceClient interface {
	Sort(ctx context.Context, in *RequestSorting, opts ...grpc.CallOption) (SortingService_SortClient, error)
}

type sortingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSortingServiceClient(cc grpc.ClientConnInterface) SortingServiceClient {
	return &sortingServiceClient{cc}
}

func (c *sortingServiceClient) Sort(ctx context.Context, in *RequestSorting, opts ...grpc.CallOption) (SortingService_SortClient, error) {
	stream, err := c.cc.NewStream(ctx, &SortingService_ServiceDesc.Streams[0], "/sorting.SortingService/Sort", opts...)
	if err != nil {
		return nil, err
	}
	x := &sortingServiceSortClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SortingService_SortClient interface {
	Recv() (*ResponseSorting, error)
	grpc.ClientStream
}

type sortingServiceSortClient struct {
	grpc.ClientStream
}

func (x *sortingServiceSortClient) Recv() (*ResponseSorting, error) {
	m := new(ResponseSorting)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SortingServiceServer is the server API for SortingService service.
// All implementations must embed UnimplementedSortingServiceServer
// for forward compatibility
type SortingServiceServer interface {
	Sort(*RequestSorting, SortingService_SortServer) error
	mustEmbedUnimplementedSortingServiceServer()
}

// UnimplementedSortingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSortingServiceServer struct {
}

func (UnimplementedSortingServiceServer) Sort(*RequestSorting, SortingService_SortServer) error {
	return status.Errorf(codes.Unimplemented, "method Sort not implemented")
}
func (UnimplementedSortingServiceServer) mustEmbedUnimplementedSortingServiceServer() {}

// UnsafeSortingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SortingServiceServer will
// result in compilation errors.
type UnsafeSortingServiceServer interface {
	mustEmbedUnimplementedSortingServiceServer()
}

func RegisterSortingServiceServer(s grpc.ServiceRegistrar, srv SortingServiceServer) {
	s.RegisterService(&SortingService_ServiceDesc, srv)
}

func _SortingService_Sort_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestSorting)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SortingServiceServer).Sort(m, &sortingServiceSortServer{stream})
}

type SortingService_SortServer interface {
	Send(*ResponseSorting) error
	grpc.ServerStream
}

type sortingServiceSortServer struct {
	grpc.ServerStream
}

func (x *sortingServiceSortServer) Send(m *ResponseSorting) error {
	return x.ServerStream.SendMsg(m)
}

// SortingService_ServiceDesc is the grpc.ServiceDesc for SortingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SortingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sorting.SortingService",
	HandlerType: (*SortingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sort",
			Handler:       _SortingService_Sort_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sorting.proto",
}
